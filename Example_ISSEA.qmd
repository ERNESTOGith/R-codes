---
title: "Example ISSEA"
format: html
editor: visual
---

```{r}
library(styler)
library(odbc)#contains drivers to connect to a database
library(DBI) #contains functions for interacting with the database
library(RSQL) #Generate and process 'SQL' queries in R
library(RSQLite) #Can create in-memory SQL database
library(readxl)
library(readr)
library(tidyverse)
library(janitor)
library(lubridate)
```

```{r}
Personne <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/DATACAMP/Example ISSEA/Personne.xlsx", col_names = TRUE) 

Emprunteur <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/Advanced R/ETL/fichiers_ISSEA/Emprunteur.xlsx", col_names = TRUE, na = "") 
  
Livre <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/Advanced R/ETL/fichiers_ISSEA/Livre.xlsx", col_names = TRUE)
```

```{r}
con <- dbConnect(drv = SQLite(), dbname = ":memory:")
```

```{r}
dbWriteTable(conn = con, name = "Emprunteur", value = Emprunteur)
dbWriteTable(conn = con, name = "Livre", value = Livre)
dbWriteTable(conn = con, name = "Personne", value = Personne)
```

#### Exemple 1: Sélection de la relation livre toute entière

```{r}
R1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
"
                 )
R1
```

#### Example 2: Sélection de la colonne auteur dans la relation livre.

```{r}
R2_distinct <- dbGetQuery(conn = con,
statement = "
SELECT distinct(auteur)
FROM Livre
"
                 )
R2_distinct

R2_all <- dbGetQuery(conn = con,
statement = "
SELECT auteur
FROM Livre

"
                     )
R2_all
```

#### 2-3 Exemple restriction à un seul critère

#### Exemple 1: Sélectionner tous les livres écrits par Zola(sans aucune projection)

```{r}
R_23_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE auteur = 'Zola'

"
                     )
R_23_1
```

#### Exemple 2: Sélectionner les titres et auteurs des livres dont les prix sont supérieurs ou égaux à 100

```{r}
R_23_2 <- dbGetQuery(conn = con,
statement = "
SELECT titre, auteur
FROM Livre
WHERE prix >= 100
" 
                     )
R_23_2
```

#### 2.4 Exemples d'utilisation des opérations de calcul

### Exemple 1: Donner les titres et auteurs, ainsi que les prix des livres d'au moins 100 F après une réduction de 5%

```{r}
R_24_1 <- dbGetQuery(conn = con,
statement = "
SELECT titre, auteur, prix*(1 - 0.05)
FROM Livre
WHERE prix*(1 - 0.05) >= 100
"                     
                     )
R_24_1
```

### 2-5 Exemples de restrictions avec opérateurs logiques

### Exemple 1: Sélectionner les livres écrits par Zola et dont les prix sont \>= 100

```{r}
R_25_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE auteur = 'Zola' AND prix >= 100
"
                     )
R_25_1
```

### Exemple 2: Trouver les livres écrits par Balzac ou Zola

```{r}
R_25_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (auteur = 'Balzac' OR auteur = 'Zola')
"
                     
                     )
R_25_2


R_25_3 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE auteur IN ('Balzac', 'Zola') 
"
                     
                     )
R_25_3
```

### Exemple 3: Trouver les livres qui ne sont écrits ni par Balzac, ni par Zola

```{r}
R_25_4 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE NOT (auteur IN ('Balzac', 'Zola'))
"
                     )
R_25_4
```

### 2-6 Exemple de relation ordonnée

### Exemple 1: Donner les livres suivant l'ordre alphabétique croissant des titres puis des auteurs

```{r}
R_26_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
ORDER BY titre, auteur
"
                     )
R_26_1
```

### Exemple 2: Donner les livres suivants l'ordre décroissant des auteurs, puis des titres

```{r}
R_26_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
ORDER BY auteur DESC, titre DESC
"
                     )
R_26_2
```

### Exemple 3: Donner les livres suivants l'ordre croissant des auteurs, puis l'ordre décroissant des titres

```{r}
R_26_3 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
ORDER BY auteur ASC, titre DESC
"
                     )
R_26_3
```

### 2.7 Exemples de restriction avec l'opérateur d'intervalle

### Exemple 1: Donner les livres dont les prix sont compris entre 80F et 100F

```{r}
R_27_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (prix BETWEEN 80 AND 100)
"
                     )
R_27_1

R_27_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (prix >= 80 AND prix <= 100)
"
                     )
R_27_2
```

### 2.8 Exemple de restriction avec l'opérateur d'ensemble

### Exemple 1: Sélectionner les livres dont les prix sont 80, 90 ou 100

```{r}
R_28_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (prix IN (80, 90, 100))
"
)
R_28_1
```

### Exemple 2: Donner la requête inverse

```{r}
R_28_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (prix NOT IN (80, 90, 100))
"
                     )
R_28_2
```

### 2.9 Exemples de restriction avec le test de valeur nulle

### Exemple 1: Sélectionner les livres sortis non encore retournés

```{r}
R_29_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Emprunteur
WHERE (retour IS NULL)
"
                     )
R_29_1
```

### Exemple 2: Sélectionner les emprunts des livres effectivement retournés

```{r}
R_29_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Emprunteur
WHERE (NOT retour IS NULL)
"
                     )
R_29_2 
```

### 2.10 Exemples de restriction avec l'opérateur de ressemblance

### Exemple 1: Sélectionner les livres dont les titres commencent par " Les lettres"

```{r}
R_29_1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (titre LIKE 'Les lettres%')
"
                     )
R_29_1
```

### Exemple 2: Sélectionner les livres dont le nom de l'auteur a commence 2è lettre un 'a'

```{r}
R_29_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE (auteur LIKE '_a%')
"
                     )
R_29_2
```

### 2.11 Exemple de calcul du nombre de tuples (COUNT)

### Exemple 1: Quel est le nombre total de livres ?

```{r}
R_2_11_1 <- dbGetQuery(conn = con,
statement = "
SELECT COUNT(*)
FROM Livre
"
                       )
R_2_11_1
```

### Exemple 2: Quel est le nombre d'auteurs ?

```{r}
R_2_11_2 <- dbGetQuery(conn = con,
statement = "
SELECT COUNT(ALL auteur)
FROM Livre
"
                       )
R_2_11_2
```

### Exemple 3: Quel est le nombre d'auteurs ayant les noms différents ?

```{r}
R_2_11_3 <- dbGetQuery(conn = con,
statement = "
SELECT COUNT(DISTINCT auteur)
FROM Livre
"
                       )
R_2_11_3
```

### Exemple 4: Nombre d'auteurs de romans ayant un nom différent

```{r}
R_2_11_4 <- dbGetQuery(conn = con,
statement = "
SELECT COUNT(DISTINCT auteur)
FROM Livre
WHERE (genre = 'roman')
"
                       )
R_2_11_4
```

### 2.12 Exemple de calcul de la somme SUM

### Exemple 1: Calculer la somme des prix des livres

```{r}
R_2_12_1 <- dbGetQuery(conn = con,
statement = "
SELECT SUM(prix)
FROM Livre
"
                       )
R_2_12_1
```

### Exemple 2: Calculer le montant de tous les romans

```{r}
R_2_12_2 <- dbGetQuery(conn = con,
statement = "
SELECT SUM(prix)
FROM Livre
WHERE (genre = 'roman')
"
                       )
R_2_12_2
```

### 2.13 Exemple de calcul de la moyenne (AVG)

### Exemple 1: calculer le prix moyen des livres

```{r}
R_2_13_1 <- dbGetQuery(conn = con,
statement = "
SELECT AVG(prix)
FROM Livre
"
                       )
R_2_13_1
```

### 2.14 Exemple de calcul du minimum

### Exemple 1: Afficher le prix du livre le moins cher

```{r}
R_2_14_1 <- dbGetQuery(conn = con,
statement = "
SELECT MIN(prix)
FROM Livre

"
                       )
R_2_14_1
```

### Exemple 2: Afficher le prix du livre le moins cher dans le genre poésie

```{r}
R_2_14_2 <- dbGetQuery(conn = con,
statement = "
SELECT MIN(prix)
FROM Livre
WHERE (genre = 'poésie')
"
                       )
R_2_14_2
```

### 2.15 Exemple de calcul avec le maximum

### Exemple 1: Rechercher l'auteur ayant le nom le plus grand dans l'ordre lexicographique

```{r}
R_15_1 <- dbGetQuery(conn = con,
statement = "
SELECT MAX(auteur)
FROM Livre
"
                     )
R_15_1
```

### 2.16 Exemple d'utilisation de la clause de regroupement GROUP BY

### Exemple 1: Calculer le nombre de livres repertoriés pour chaque auteur

```{r}
R_2_16_1 <- dbGetQuery(conn = con,
statement = "
SELECT auteur,COUNT(*) 
FROM Livre
GROUP BY auteur
"
                       )
R_2_16_1
```

### Exemple 2: Donner pour chaque auteur les prix des livres le plus cher et le moins cher

```{r}
R_2_16_2 <- dbGetQuery(conn = con,
statement = "
SELECT auteur, MAX(prix), MIN(prix)
FROM Livre
GROUP BY auteur
"
                       )
R_2_16_2
```

Exemple 3: Afficher pour chaque auteur ayant écrit plus d'un livre, le prix du livre le moins cher et le prix du livre le plus cher.

```{r}
R_2_16_3 <- dbGetQuery(conn = con,
statement = "
SELECT auteur, MIN(prix) AS Prix_mini, MAX(prix) AS Prix_max
FROM Livre
GROUP BY auteur
HAVING (COUNT(*) > 1)
"
                       )
R_2_16_3
```

### 2.17 Exemples de jointure

### Exemple 1: Quel est l'ensemble des livres actuellement empruntés ?

```{r}
R_2_17_1 <- dbGetQuery(conn = con,
statement = "
SELECT Livre.n_livre, titre, auteur
FROM Livre, Emprunteur
WHERE (Livre.n_livre = Emprunteur.n_livre) AND (retour IS NULL)
"
                       )
R_2_17_1
```

### Exemple 2: Sélectionner les titres des livres en cours d'emprunt associés aux noms d'emprunteurs

```{r}
R_2_17_2 <- dbGetQuery(conn = con,
statement = "
SELECT titre, nom
FROM Livre, Emprunteur, Personne
WHERE (Livre.n_livre = Emprunteur.n_livre) AND
      (Personne.n_personne = Emprunteur.n_personne) AND
       (retour IS NULL)

"
                       )
R_2_17_2
```

### Exemple 3: Afficher la liste des livres les plus souvent empruntés triés par ordre décroissant (titre et le nombre de fois que le livre a été emprunté)

```{r}
R_2_17_3 <- dbGetQuery(conn = con,
statement = "
SELECT titre, COUNT(*)
FROM Livre, Emprunteur
WHERE (Livre.n_livre = Emprunteur.n_livre)
GROUP BY titre
ORDER BY COUNT(*) DESC

"
                       )
R_2_17_3
```

### 2.18 Exemple d'utilisation des requêtes imbriquées

### Exemple 1: Rechercher les livres dont le prix est supérieur au prix moyen

```{r}
R_2_18_1 <- dbGetQuery(conn = con,
statement = "
SELECT titre, prix
FROM Livre
WHERE(prix > (SELECT AVG(prix)
              FROM Livre))

"
                       )
R_2_18_1
```

### Exemple 2: Sélectionner les livres ayant été empruntés

```{r}
R_2_18_2 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE(n_livre IN (
                 SELECT n_livre
                 FROM Emprunteur
                 ))

"
                       )
R_2_18_2
```

### Exemple 3: Rechercher les titres des livres ayant une personne de même nom

### Exemple 4: Rechercher les livres ayant été empruntés au moins une fois.

```{r}
R_2_18_4 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM Livre
WHERE EXISTS (
             SELECT *
             FROM Emprunteur
             WHERE Livre.n_livre = Emprunteur.n_livre
             )

"
                       )

R_2_18_4
```

### 2.19 Exemple d'utilisation de l'opérateur UNION

### Exemple 1: Rechercher la liste des noms d'auteurs et noms de personnes, on utilise la requête suivante:

```{r}
R_19 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(auteur)
FROM Livre
UNION
SELECT DISTINCT(nom)
FROM Personne
"
                   )
R_19
```
