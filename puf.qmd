---
title: "PUF"
format: html
editor: visual
---

```{r}
library(readxl)
library(styler)
library(odbc)
library(DBI)
library(RSQL)
library(RSQLite)
library(tidyverse)
```

```{r}
U <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/DATACAMP/PUF/U.xlsx", col_names = TRUE)
F <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/DATACAMP/PUF/F.xlsx", col_names = TRUE)
P <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/DATACAMP/PUF/P.xlsx", col_names = TRUE)
PUF <- read_xlsx("C:/DATA_SCIENCE_ENGLISH/DATACAMP/PUF/PUF.xlsx", col_names = TRUE)
```

### . Creating a database

```{r}
con <- dbConnect(drv = SQLite(), dbname = ":memory:")
```

### . Loading data in database

```{r}
dbWriteTable(conn = con, name = "U", value = U)
dbWriteTable(conn = con, name = "F", value = F)
dbWriteTable(conn = con, name = "P", value = P)
dbWriteTable(conn = con, name = "PUF", value = PUF)
```

### 1. Donner le numéro, le nom et la ville de toutes les usines

```{r}
R1 <- dbGetQuery(conn = con,
statement = "
SELECT *
FROM U
"
                 )
R1
```

### 2. Donner le numéro et le nom de toutes les usines de Londres

```{r}
R2 <- dbGetQuery(conn = con,
statement = "
SELECT * 
FROM U
WHERE (Ville = 'LONDRES')
"
                 )
R2
```

### 3.Donner les numéros des fournisseurs qui approvisionnent l'usine n°1 en produit n°1

```{r}
R3 <- dbGetQuery(conn = con,
statement = "
SELECT NF
FROM PUF
WHERE (NU = 1) AND (NP = 1)
"
                 )
R3
```

### 4. Donner le nom et la couleur des produits livrés par le fournisseur n°1.

```{r}
R4_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NomP), Couleur
FROM PUF, P
WHERE (PUF.NP = P.NP) AND (NF = 1)

"
                 )

R4_1

R4_2 <- dbGetQuery(conn = con,
statement = "
SELECT nomP, Couleur
FROM PUF
INNER JOIN P ON PUF.NP = P.NP
wHERE (NF = 1)
"
                   )

R4_2
```

### 5. Donner les numéros des fournisseurs qui approvisionnent l'usine n° 1 en un produit rouge

```{r}
R5_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT (PUF.NF)
FROM PUF, P
WHERE (PUF.NP = P.NP)
      AND (PUF.NU = 1)
      AND (Couleur = 'rouge')

"
                 )

R5_1

R5_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT (PUF.NF)
FROM PUF
INNER JOIN P ON PUF.NP = P.NP
WHERE ((PUF.NU = 1) AND (Couleur = 'rouge'))
"
                   )

R5_2
```

### 6.Donner les noms des fournisseurs qui approvisionnent une usine de Londres ou de Paris en un produit rouge

```{r}
R6_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NomF)
FROM PUF, P, F, U
WHERE (PUF.NP = P.NP) 
      AND (PUF.NF = F.NF)
      AND (PUF.NU = U.NU)
      AND (U.Ville IN ('PARIS', 'LONDRES'))
      AND (Couleur = 'rouge')
"
                 )
R6_1

R6_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NomF)
FROM P
INNER JOIN (U INNER JOIN
            (F INNER JOIN PUF ON F.NF = PUF.NF)
            ON PUF.NU = PUF.NU) ON P.NP = PUF.NP
WHERE (U.Ville IN ('PARIS', 'LONDRES') AND Couleur = 'rouge')

"
                   )

R6_2
```

### 7. Donner les numéros des produits livrés à une usine par un fournisseur de la même ville.

```{r}
R7_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(PUF.NP)
FROM PUF, U, F
WHERE (PUF.NU = U.NU)
      AND(PUF.NF = F.NF)
      AND(U.Ville = F.Ville)

"
                 )

R7_1

R7_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(PUF.NP)
FROM U
INNER JOIN (F INNER JOIN PUF ON PUF.NF = F.NF) ON PUF.NU = U.NU
WHERE (U.Ville = F.Ville)
"
                   )

R7_2
```

### 8. Donner les numéros des produits livrés à une usine de Londres par un fournisseur de Londres

```{r}
R8_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(PUF.NP)
FROM PUF, F, U
WHERE (PUF.NF = F.NF)
      AND (PUF.NU = U.NU)
      AND (U.Ville = 'LONDRES')
      AND (F.Ville = 'LONDRES')

"
                 )

R8_1

R8_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(PUF.NP)
FROM U
INNER JOIN (F INNER JOIN PUF ON PUF.NF = F.NF) ON U.NU = PUF.NU
WHERE ((U.Ville = 'LONDRES') AND (F.Ville = 'LONDRES'))
"
                   )

R8_2
```

### 9. Donner les numéros des usines qui ont au moins un fournisseur qui n'est pas de la même ville.

```{r}
R9_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(U.NU)
FROM F INNER JOIN (U INNER JOIN PUF ON U.NU = PUF.NU) ON F.NF = PUF.NF
WHERE (F.Ville <> U.Ville)

"
                   )

R9_1

```

### 10. Donner les numéros des fournisseurs qui approvisionnent à la fois les usines n° 1 et n° 2.

```{r}
R10_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(First.NF)
FROM PUF First, PUF Second
WHERE (First.NF = Second.NF) AND (First.NU = 1) AND (Second.NU = 2)
"
                  )

R10_1

R10_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NF)
FROM PUF
WHERE NF IN (
             SELECT NF
             FROM PUF
             WHERE(NU = 1)
            )
          AND NF IN (
               SELECT NF
               FROM PUF
               WHERE(NU = 2)
                    )
"
                    )

R10_2

R10_3 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NF)
FROM PUF
WHERE(NU = 1)
INTERSECT
SELECT DISTINCT(NF)
FROM PUF
WHERE(NU = 2)
"
                    )

R10_3
```

### 11. Donner les numéros des usines qui utilisent au moins un produit disponible chez les fournisseur n° 3 (c'est-à-dire un produit qu'il livre mais pas nécessairement à cette usine)

```{r}
R11_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NU)
FROM PUF
WHERE NP IN (
             SELECT NP
             FROM PUF
             WHERE (NF = 3)

             )

"
                  )

R11_1

R11_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT(NU)
FROM PUF
WHERE NP NOT IN (
                 SELECT NP
                 FROM PUF
                 WHERE NF <> 3
                 AND NP NOT IN (
                                SELECT NP 
                                FROM PUF
                                WHERE NF = 3
                 
                               )
                 )
"
                    )

R11_2

# Interprêtation de la deuxième requête: On a les numéros de produits qui ne sont pas livrés par le fournisseur n°3 et livrés par celui-ci.
```

### 12. Donner le numéro du produit le plus léger (les numéros si plusieurs ont ce même poids).

```{r}
R12_1 <- dbGetQuery(conn = con,
statement = "
SELECT NP
FROM P
WHERE Poids IN (
               SELECT MIN(Poids)
               FROM P
               
               )

"

                  )

R12_1

R12_2 <- dbGetQuery(conn = con,
statement = "
SELECT NP
FROM P P1 
WHERE NOT EXISTS (
                   SELECT *
                   FROM P
                   WHERE (P1.Poids > Poids)
                  )
"
                    )

R12_2
```

13. Donner les numéros des usines qui ne reçoivent aucun produit rouge d'un fournisseur londonien.

    ```{r}
    R_13_1 <- dbGetQuery(conn = con,
    statement = "
    SELECT DISTINCT(NU)
    FROM U
    WHERE NU IN (
                 SELECT NU
                 FROM P
                 INNER JOIN(F INNER JOIN PUF ON PUF.NF = F.NF) ON PUF.NP = P.NP
                 WHERE ((Couleur <> 'rouge') OR (F.Ville <> 'LONDRES'))
                        
                       
               )
    "
                       )
    R_13_1



    R_13_2 <- dbGetQuery(conn = con,
    statement = "
    SELECT DISTINCT(PUF.NU)
    FROM P
    INNER JOIN(F INNER JOIN PUF ON PUF.NF = F.NF) ON PUF.NP = P.NP
    WHERE((Couleur <> 'rouge') OR (Ville <> 'LONDRES'))


    "
                         )
    R_13_2
    ```

14. Donner tous les triplets (VilleF, NP, VilleU) tels qu'un fournisseur de la première ville aprovisionnne une usine de la deuxième ville

```{r}
R_14 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT F.Ville, NP, U.Ville
FROM U
INNER JOIN (F INNER JOIN PUF ON PUF.NF = F.NF) ON PUF.NU = U.NU
"
                   )
R_14
```

15. Même question qu'en 14, mais sans les triplets où les deux villes sont identiques

```{r}
R15 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT F.Ville, NP, U.Ville
FROM U
INNER JOIN(F INNER JOIN PUF ON PUF.NF = F.NF) ON PUF.NU = U.NU
WHERE ((F.Ville <> U.Ville))
"
                  )

R15
```

16. Donner les numéros des produits qui sont livrés à toutes les usines de Londres

```{r}
R16_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT NP
FROM PUF, U
WHERE (PUF.NU = U.NU)
      AND (Ville = 'LONDRES')
"
                  )
R16_1

R16_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT NP
FROM PUF
WHERE NU IN (
             SELECT U.NU 
             FROM U
             INNER JOIN PUF ON PUF.NU = U.NU
             WHERE (Ville = 'LONDRES')
)
"
                    )
  
R16_2
# On a d'abord les usines de Londres avec les numéros des produits livrés.
```

17.Donner les numéros des fournisseurs qui approvisionnent toutes les usines avec le même produit.

```{r}
R17_1 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT NF
FROM PUF
WHERE NOT EXISTS(
                 SELECT NU
                 FROM U
                 WHERE NOT EXISTS(
                                  SELECT *
                                  FROM U
                                  INNER JOIN(F INNER JOIN(P INNER JOIN PUF ON PUF.NP = P.NP)
                                    ON PUF.NF = F.NF) ON PUF.NU = U.NU )
                                    
"
)

R17_1

R17_2 <- dbGetQuery(conn = con,
statement = "
SELECT DISTINCT NF
FROM PUF
WHERE NOT EXISTS(
                 SELECT NU
                 FROM U
                 WHERE NOT EXISTS(
                                  SELECT *
                                  FROM PUF PUF1, F, P, U
                                  WHERE((PUF1.NF = F.NF)
                                      AND (PUF1.NP = PUF.NP)
                                      AND (PUF1.NU = U.NU)))
               )
                                    
"
)

R17_2
```

### 18. Donner les numéros des usines qui achètent au fournisseur n° 4 tous les produits qu'il fournit.

```{r}
R18 <- dbGetQuery(conn = con,
statement = "
SELECT NU
FROM U
WHERE EXISTS (
              SELECT *
              FROM PUF
              WHERE (NF = 4)
)
"
                  )
  
R18
```
